from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import os

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("OTZYVY", "0"))

bot = Bot(token=API_TOKEN, parse_mode="Markdown")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM States
class Form(StatesGroup):
    feedback = State()
    suggestion = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –ú–µ–Ω—é"))
    kb.add(KeyboardButton("‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    kb.add(KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ AV COFFEE ‚òï\n–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)

# –ú–µ–Ω—é —Å —Ñ–æ—Ç–∫–∞–º–∏
@dp.message_handler(lambda message: message.text == "üìã –ú–µ–Ω—é")
async def show_menu(message: types.Message):
    await bot.send_photo(message.chat.id, InputFile("—á–∏–∑–∫–µ–π–∫.jpg"), caption="üç∞ –ß–∏–∑–∫–µ–π–∫ ‚Äî 270–†")
    await bot.send_photo(message.chat.id, InputFile("–∫—Ä—É–∞—Å–∞–Ω.jpg"), caption="ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω —Å –ª–æ—Å–æ—Å–µ–º ‚Äî 390–†")
    await bot.send_photo(message.chat.id, InputFile("–∫–∞–ø—É—á–∏–Ω–æ.jpg"), caption="‚òï –ö–∞–ø—É—á–∏–Ω–æ ‚Äî 200–†")
    await bot.send_photo(message.chat.id, InputFile("—ç—Å–ø—Ä–µ—Å—Å–æ.jpg"), caption="‚òï –≠—Å–ø—Ä–µ—Å—Å–æ ‚Äî 150–†")

# –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_feedback(message: types.Message):
    await message.answer("–ë—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –ù–∞–ø–∏—à–∏ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç üëá")
    await Form.feedback.set()

@dp.message_handler(state=Form.feedback, content_types=types.ContentTypes.TEXT)
async def handle_feedback(message: types.Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    text = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíö")
    if ADMIN_CHAT_ID:
        msg = f"üì® *–û—Ç–∑—ã–≤* –æ—Ç @{username}:\n{text}"
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
    await state.finish()

# –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"
@dp.message_handler(lambda message: message.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")
async def start_suggestion(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å üëá")
    await Form.suggestion.set()

@dp.message_handler(state=Form.suggestion, content_types=types.ContentTypes.TEXT)
async def handle_suggestion(message: types.Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    text = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë üöÄ")
    if ADMIN_CHAT_ID:
        msg = f"üß† *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ* –æ—Ç @{username}:\n{text}"
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
