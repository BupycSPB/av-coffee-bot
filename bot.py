from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import InputFile
import os

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("OTZYVY", "0"))

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class Form(StatesGroup):
    feedback = State()
    menu_suggestion = State()
    idea = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –ú–µ–Ω—é"))
    kb.add(KeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    kb.add(KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"))
    return kb

# –í–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é ("–ø–∞–ø–∫–∞" –º–µ–Ω—é)
def menu_submenu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Å —Ñ–æ—Ç–æ"))
    kb.add(KeyboardButton("üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –±–µ–∑ —Ñ–æ—Ç–æ"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ –º–µ–Ω—é"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# /start ‚Äî –∑–∞–ø—É—Å–∫/–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ AV COFFEE ‚òï\n–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=main_menu()
    )

# üìã –ú–µ–Ω—é ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "üìã –ú–µ–Ω—é", state='*')
async def menu_options(message: types.Message, state: FSMContext):
    await message.answer("–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=menu_submenu())

# üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Å —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: message.text == "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Å —Ñ–æ—Ç–æ", state='*')
async def show_menu_photos(message: types.Message):
    items = [
        ("pictures/—á–∏–∑–∫–µ–π–∫.jpg", "üç∞ –ß–∏–∑–∫–µ–π–∫ ‚Äî 270‚ÇΩ"),
        ("pictures/–∫—Ä—É–∞—Å–∞–Ω.jpg", "ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω —Å –ª–æ—Å–æ—Å–µ–º ‚Äî 390‚ÇΩ"),
        ("pictures/–∫–∞–ø—É—á–∏–Ω–æ.jpg", "‚òï –ö–∞–ø—É—á–∏–Ω–æ ‚Äî 200‚ÇΩ"),
        ("pictures/—ç—Å–ø—Ä–µ—Å—Å–æ.jpg", "‚òï –≠—Å–ø—Ä–µ—Å—Å–æ ‚Äî 150‚ÇΩ"),
    ]
    for filename, caption in items:
        try:
            await bot.send_photo(message.chat.id, InputFile(filename), caption=caption)
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {filename}: {e}")

# üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –±–µ–∑ —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: message.text == "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –±–µ–∑ —Ñ–æ—Ç–æ", state='*')
async def show_menu_text(message: types.Message):
    try:
        with open("menu.txt", "r", encoding="utf-8") as f:
            menu = f.read()
    except FileNotFoundError:
        menu = "–ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ."
    await message.answer(f"‚òï –ù–∞—à–µ –º–µ–Ω—é:\n{menu}")

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ –º–µ–Ω—é", state='*')
async def suggest_menu_item(message: types.Message):
    await Form.menu_suggestion.set()
    await message.answer("–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ –º–µ–Ω—é? –ù–∞–ø–∏—à–∏ –Ω–∏–∂–µ üëá")

# üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
@dp.message_handler(lambda message: message.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", state='*')
async def leave_feedback(message: types.Message):
    await Form.feedback.set()
    await message.answer("–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —Ç–≤–æ–µ–º—É –æ—Ç–∑—ã–≤—É! –ù–∞–ø–∏—à–∏ –µ–≥–æ —Å—é–¥–∞ üëá")

# üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é
@dp.message_handler(lambda message: message.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", state='*')
async def suggest_idea(message: types.Message):
    await Form.idea.set()
    await message.answer("–£ —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ—è? –ü–∏—à–∏ —Å—é–¥–∞ ‚Äî –º—ã —á–∏—Ç–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá")

# ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", state='*')
async def go_back(message: types.Message, state: FSMContext):
    await state.finish()
    await send_welcome(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∏–¥–µ–π
@dp.message_handler(state=Form.feedback)
async def handle_feedback(message: types.Message, state: FSMContext):
    await state.finish()
    await process_message(message, "üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤")

@dp.message_handler(state=Form.menu_suggestion)
async def handle_menu_suggestion(message: types.Message, state: FSMContext):
    await state.finish()
    await process_message(message, "üçΩÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–µ–Ω—é")

@dp.message_handler(state=Form.idea)
async def handle_idea(message: types.Message, state: FSMContext):
    await state.finish()
    await process_message(message, "üí° –ù–æ–≤–∞—è –∏–¥–µ—è")

# –ü—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler()
async def handle_unknown(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ. ‚òï")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
async def process_message(message: types.Message, title: str):
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    user_text = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ. ‚òï")

    if ADMIN_CHAT_ID != 0:
        text = f"{title} –æ—Ç {username}:\n{user_text}"
        try:
            await bot.send_message(ADMIN_CHAT_ID, text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
