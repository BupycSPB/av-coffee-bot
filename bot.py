from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("OTZYVY", "0"))

bot = Bot(token=API_TOKEN, parse_mode="MarkdownV2")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    feedback = State()
    suggestion = State()

# /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"))
    kb.add(KeyboardButton("‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    kb.add(KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ *AV COFFEE* ‚òï\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

# –¢–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda m: m.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")
async def text_menu(message: types.Message):
    menu_text = (
        "üç∞ *–ß–∏–∑–∫–µ–π–∫* ‚Äî 270–†\n"
        "ü•ê *–ö—Ä—É–∞—Å—Å–∞–Ω —Å –ª–æ—Å–æ—Å–µ–º* ‚Äî 390–†\n"
        "‚òï *–ö–∞–ø—É—á–∏–Ω–æ* ‚Äî 200–†\n"
        "‚òï *–≠—Å–ø—Ä–µ—Å—Å–æ* ‚Äî 150–†"
    )
    await message.answer(menu_text, parse_mode="MarkdownV2")

# –ó–∞–ø—É—Å–∫ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
@dp.message_handler(lambda m: m.text == "‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_feedback(message: types.Message):
    await message.answer(
        "–ë—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–π –æ—Ç–∑—ã–≤! –ù–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∏–∂–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    await Form.feedback.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
@dp.message_handler(state=Form.feedback, content_types=types.ContentTypes.TEXT)
async def process_feedback(message: types.Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    text = message.text.replace("_", "\\_").replace("*", "\\*")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíö")
    if ADMIN_CHAT_ID:
        notification = f"üì® *–û—Ç–∑—ã–≤* –æ—Ç @{username}:\n{text}"
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=notification)
    await state.finish()

# –ó–∞–ø—É—Å–∫ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(lambda m: m.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")
async def start_suggestion(message: types.Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardRemove()
    )
    await Form.suggestion.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(state=Form.suggestion, content_types=types.ContentTypes.TEXT)
async def process_suggestion(message: types.Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    text = message.text.replace("_", "\\_").replace("*", "\\*")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë üöÄ")
    if ADMIN_CHAT_ID:
        notification = f"üß† *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ* –æ—Ç @{username}:\n{text}"
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=notification)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
