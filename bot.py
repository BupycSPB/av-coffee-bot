from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor
import os

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("OTZYVY", "0"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üçΩ –ú–µ–Ω—é"))
main_kb.add(KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton("üì© –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –º–µ–Ω—é"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ AV COFFEE ‚òï\n–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üçΩ –ú–µ–Ω—é")
async def send_menu(message: types.Message):
    menu = [
        {"name": "–ß–∏–∑–∫–µ–π–∫", "price": "270‚ÇΩ", "file": InputFile("—á–∏–∑–∫–µ–π–∫.jpg")},
        {"name": "–ö—Ä—É–∞—Å—Å–∞–Ω —Å –ª–æ—Å–æ—Å–µ–º", "price": "420‚ÇΩ", "file": InputFile("–∫—Ä—É–∞—Å–∞–Ω.jpg")},
        {"name": "–ö–∞–ø—É—á–∏–Ω–æ", "price": "200‚ÇΩ", "file": InputFile("–∫–∞–ø—É—á–∏–Ω–æ.jpg")},
        {"name": "–≠—Å–ø—Ä–µ—Å—Å–æ", "price": "150‚ÇΩ", "file": InputFile("—ç—Å–ø—Ä–µ—Å—Å–æ.jpg")},
    ]
    for item in menu:
        caption = f"{item['name']} ‚Äî {item['price']}"
        await bot.send_photo(message.chat.id, item['file'], caption=caption)

@dp.message_handler(lambda msg: msg.text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤")
async def request_feedback(message: types.Message):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∑–¥–µ—Å—å üëá")
    dp.register_message_handler(handle_feedback, content_types=types.ContentTypes.TEXT, state=None)

@dp.message_handler(lambda msg: msg.text == "üì© –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –º–µ–Ω—é")
async def request_suggestion(message: types.Message):
    await message.answer("üì¨ –ù–∞–ø–∏—à–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–µ–Ω—é üëá")
    dp.register_message_handler(handle_suggestion, content_types=types.ContentTypes.TEXT, state=None)

async def handle_feedback(message: types.Message):
    text = message.text
    username = message.from_user.username or f"{message.from_user.first_name}"
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíö")
    if ADMIN_CHAT_ID:
        msg = f"üì® *–û—Ç–∑—ã–≤* –æ—Ç @{username}:{text}"
        await bot.send_message(ADMIN_CHAT_ID, msg, parse_mode="Markdown")
    dp.message_handlers.unregister(handle_feedback)

async def handle_suggestion(message: types.Message):
    text = message.text
    username = message.from_user.username or f"{message.from_user.first_name}"
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üß†")
    if ADMIN_CHAT_ID:
        msg = f"üìå *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –º–µ–Ω—é* –æ—Ç @{username}:
{text}"
        await bot.send_message(ADMIN_CHAT_ID, msg, parse_mode="Markdown")
    dp.message_handlers.unregister(handle_suggestion)

@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
